{"version":3,"sources":["actions/itemActions.ts","actions/types.ts","components/ShoppingList.tsx","components/AppNavbar.tsx","components/ItemModal.tsx","reducers/itemReducer.ts","reducers/index.ts","store.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["setItemsLoading","type","connect","state","item","getItems","dispatch","axios","get","then","res","payload","data","deleteItem","id","delete","useEffect","length","items","Container","ListGroup","TransitionGroup","className","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","color","size","onClick","console","log","AppNavBar","React","useState","isOpen","changeOpen","Navbar","dark","expand","clasName","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","addItem","post","modal","changeModal","changeName","toggle","style","marginBottom","Modal","ModalHeader","ModalBody","Form","onSubmit","e","preventDefault","FormGroup","Label","for","Input","placeholder","onChange","target","value","marginTop","block","initialState","loading","combineReducers","action","filter","middleWare","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","App","AppNavbar","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAoCaA,EAAkB,WAC7B,MAAO,CACLC,KCnCiC,kBCsDtBC,eAJS,SAACC,GAAD,MAAiB,CACvCC,KAAMD,EAAMC,QAG0B,CAACC,SFjDjB,kBAAM,SAACC,GAC7BA,EAASN,GACTO,IAAMC,IAAI,cAAcC,MAAK,SAAAC,GAAG,OAC9BJ,EAAS,CACPL,KCZ2B,YDa3BU,QAASD,EAAIE,YE4CgCC,WF9BzB,SAACC,GAAD,OAAiB,SAACR,GAC1CC,IAAMQ,OAAO,cAAeD,GAAIL,MAAK,WACjCH,EAAS,CACLL,KC5ByB,cD6BzBU,QAASG,UE0BJZ,EA3CgB,SAAC,GAAwC,IAAvCE,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,SAAUQ,EAAsB,EAAtBA,WAG/CG,qBAAU,WACRX,MACC,CAACD,EAAOA,EAAKa,OAAS,OAEzB,IAKMC,EAAQd,EAAKc,MACnB,OACE,kBAACC,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,iBACxBJ,EAAQA,EAAMK,KAAI,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAR,OACjB,kBAACC,EAAA,EAAD,CAAeC,IAAKH,EAAKI,QAAS,IAAKC,WAAW,QAChD,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACET,UAAU,aACVU,MAAM,SACNC,KAAK,KACLC,QAAS,kBAlBFpB,EAkBqBU,EAjB1CW,QAAQC,IAAI,iBACZvB,EAAWC,GAFS,IAACA,IAcT,QAQCW,OAGF,W,gECAAY,EA9Ba,WAAO,IAAD,EAEDC,IAAMC,UAAS,GAFd,mBAEvBC,EAFuB,KAEfC,EAFe,KAQ9B,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQV,MAAM,OAAOW,MAAI,EAACC,OAAO,KAAKC,SAAS,QAC3C,kBAAC1B,EAAA,EAAD,KACI,kBAAC2B,EAAA,EAAD,CAAaC,KAAK,KAAlB,iBACA,kBAACC,EAAA,EAAD,CAAed,QAThB,WACFO,GAATD,MASY,kBAACS,EAAA,EAAD,CAAUT,OAAQA,EAAQU,QAAM,GAC5B,kBAACC,EAAA,EAAD,CAAKN,SAAS,UAAUK,QAAM,GAC1B,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASN,KAAK,sBAAd,iB,wDCoCjB7C,eANS,SAACC,GACrB,MAAO,CACHe,MAAOf,EAAMe,SAImB,CAACoC,QJnDlB,SAAClD,GAAD,OAAiB,SAACE,GACvCC,IAAMgD,KAAK,aAAcnD,GAAMK,MAAK,SAAAC,GAAG,OACrCJ,EAAS,CACPL,KCpB0B,WDqB1BU,QAASD,EAAIE,aI+CJV,EApDG,SAAC,GAAoB,IAAnBoD,EAAkB,EAAlBA,QAAkB,EACPf,oBAAS,GADF,mBAC7BiB,EAD6B,KACtBC,EADsB,OAETlB,mBAAS,IAFA,mBAE7Bd,EAF6B,KAEvBiC,EAFuB,KAI9BC,EAAS,WACbF,GAAaD,IAmBf,OACE,6BACE,kBAACzB,EAAA,EAAD,CAAQC,MAAM,OAAO4B,MAAO,CAAEC,aAAc,QAAU3B,QAASyB,GAA/D,YAGA,kBAACG,EAAA,EAAD,CAAOtB,OAAQgB,EAAOG,OAAQA,GAC5B,kBAACI,EAAA,EAAD,CAAaJ,OAAQA,GAArB,yBACA,kBAACK,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,SApBC,SAACC,GACdA,EAAEC,iBAMFd,EAJgB,CACd7B,SAKFkC,MAYU,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,QAAX,QACA,kBAACC,EAAA,EAAD,CAAOvE,KAAK,OAAOwB,KAAK,OAAOX,GAAG,OAAO2D,YAAY,oBAAqBC,SA3B3E,SAACP,GAChBT,EAAWS,EAAEQ,OAAOC,UA2BJ,kBAAC7C,EAAA,EAAD,CAAQC,MAAM,OAAO4B,MAAO,CAACiB,UAAW,QAASC,OAAK,EAAC7E,KAAK,UAA5D,qB,umBC7CpB,IAAM8E,EAAe,CACjB7D,MAAO,CAAC,CAACM,IAAK,MACdwD,SAAS,GCJEC,cAAgB,CAC3B7E,KDOW,WAAmD,IAA1CD,EAAyC,uDAAjC4E,EAAcG,EAAmB,uCAC7D,OAAOA,EAAOjF,MACV,IJhByB,YIiBrB,OAAO,EAAP,GACOE,EADP,CAEIe,MAAOgE,EAAOvE,QACdqE,SAAS,IAEjB,IJpB2B,cIqBvB,OAAO,EAAP,GACO7E,EADP,CAEIe,MAAOf,EAAMe,MAAMiE,QAAO,SAAA/E,GAAI,OAAIA,EAAKoB,MAAQ0D,EAAOvE,aAE9D,IJ1BwB,WI2BpB,OAAO,EAAP,GACOR,EADP,CAEIe,MAAM,CAAEgE,EAAOvE,SAAV,mBAAsBR,EAAMe,UAEzC,IJ7B6B,gBI8BzB,OAAO,EAAP,GACOf,EADP,CAEI6E,SAAS,IAEjB,QACI,OAAO7E,MEzBbiF,EAAa,CAACC,KAGdC,EAAmBC,OAAOC,sCAAwCC,IAKzDC,EAHDC,YAAYC,EAPG,GAOyBN,EAAiBO,IAAe,WAAf,EAAmBT,KCO3EU,EAdO,WACpB,OACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,yBAAKpE,UAAU,OACb,kBAACyE,EAAD,MACA,kBAAC5E,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,UCNU6E,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjG,MAAK,SAAAkG,GACjCA,EAAaC,kB","file":"static/js/main.ba3750d7.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from \"./types\";\r\n\r\ninterface IItem {\r\n  name: string;\r\n  id: number;\r\n}\r\n\r\nexport const getItems = () => (dispatch: any) => {\r\n  dispatch(setItemsLoading);\r\n  axios.get(\"/api/items\").then(res =>\r\n    dispatch({\r\n      type: GET_ITEMS,\r\n      payload: res.data\r\n    })\r\n  );\r\n};\r\n\r\nexport const addItem = (item: IItem) => (dispatch: any) => {\r\n  axios.post(\"/api/items\", item).then(res =>\r\n    dispatch({\r\n      type: ADD_ITEM,\r\n      payload: res.data\r\n    })\r\n  );\r\n};\r\n\r\nexport const deleteItem = (id: string) =>  (dispatch: any) => {\r\n  axios.delete('/api/items/'+ id).then(() => {\r\n      dispatch({\r\n          type: DELETE_ITEM,\r\n          payload: id\r\n      })\r\n  })\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n  return {\r\n    type: ITEMS_LOADING\r\n  };\r\n};\r\n","export const GET_ITEMS: string = 'GET_ITEMS';\r\nexport const ADD_ITEM: string = 'ADD_ITEM';\r\nexport const DELETE_ITEM: string = 'DELETE_ITEM';\r\nexport const ITEMS_LOADING: string = 'ITEMS_LOADING';\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container, ListGroup, ListGroupItem, Button } from \"reactstrap\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport {connect} from \"react-redux\" \r\nimport {getItems, deleteItem} from '../actions/itemActions'\r\n\r\n\r\ninterface IItem {\r\n  _id: string;\r\n  name: string;\r\n}\r\n\r\ntype ItemType = IItem \r\n\r\nconst ShoppingList: React.FC = ({item ,getItems, deleteItem} : any) => {\r\n  // const [items, updateItems] = useState<ItemType[]>([]);\r\n\r\n  useEffect(() => {\r\n    getItems()\r\n  }, [item ? item.length : null])\r\n\r\n  const onDeleteClick = (id: string) => {\r\n    console.log('asdadasd')\r\n    deleteItem(id)\r\n  }\r\n\r\n  const items = item.items\r\n  return (\r\n    <Container>\r\n      \r\n      <ListGroup>\r\n        <TransitionGroup className=\"shopping-list\">\r\n          {items ? items.map(({ _id, name } : IItem) => (\r\n            <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n              <ListGroupItem>\r\n                <Button\r\n                  className=\"remove-btn\"\r\n                  color=\"danger\"\r\n                  size=\"sm\"\r\n                  onClick={()=> onDeleteClick(_id)}\r\n                >\r\n                  &times;\r\n                </Button>\r\n                {name}\r\n              </ListGroupItem>\r\n            </CSSTransition>\r\n          )) : null }\r\n        </TransitionGroup>\r\n      </ListGroup>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  item: state.item\r\n})\r\n\r\nexport default connect(mapStateToProps, {getItems, deleteItem})(ShoppingList);\r\n","import React, { Component } from 'react';\n\n\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Container    \n} from 'reactstrap';\n\n\n\nconst AppNavBar: React.FC = () => {\n    \n    const [isOpen, changeOpen] = React.useState(false);\n\n    const toggle = () : void => {\n        isOpen ? changeOpen(false) : changeOpen(true)\n    }\n\n    return (\n        <div>\n            <Navbar color=\"dark\" dark expand=\"sm\" clasName=\"mb-5\">\n                <Container>\n                    <NavbarBrand href='/'>Shopping List</NavbarBrand>\n                    <NavbarToggler onClick={toggle} />\n                    <Collapse isOpen={isOpen} navbar >\n                        <Nav clasName=\"ml-auto\" navbar>\n                            <NavItem>\n                                <NavLink href=\"https://github.com\">\n                                    Github    \n                                </NavLink>                                \n                            </NavItem>    \n                        </Nav>   \n                    </Collapse>\n\n                </Container>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default AppNavBar","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n} from \"reactstrap\";\r\n\r\nimport uuid from \"uuid\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { addItem } from \"../actions/itemActions\";\r\n\r\nconst ItemModal = ({addItem }:any) => {\r\n  const [modal, changeModal] = useState(false);\r\n  const [name, changeName] = useState(\"\");\r\n\r\n  const toggle = (): void => {\r\n    changeModal(!modal);\r\n  };\r\n  \r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    changeName(e.target.value)\r\n  }\r\n\r\n  const onSubmit = (e:  React.FormEvent<HTMLFormElement> ) => {\r\n      e.preventDefault();\r\n\r\n      const newItem = {\r\n        name\r\n      }\r\n\r\n      addItem(newItem)\r\n\r\n      toggle()\r\n  }\r\n    \r\n  return (\r\n    <div>\r\n      <Button color=\"dark\" style={{ marginBottom: \"2rem\" }} onClick={toggle}>\r\n        Add Item\r\n      </Button>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}> Add To Shopping List</ModalHeader>\r\n        <ModalBody>\r\n            <Form onSubmit={onSubmit}>\r\n                <FormGroup>\r\n                    <Label for='item'>Item</Label>\r\n                    <Input type=\"text\" name=\"name\" id=\"item\" placeholder=\"Add Shopping Item\"  onChange={onChange}/>\r\n                    <Button color='dark' style={{marginTop: '2rem'}} block type=\"submit\"> Add item</Button>\r\n                </FormGroup>\r\n            </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state : any) => {\r\n    return {\r\n        items: state.items\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {addItem})(ItemModal);\r\n","import {GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING} from '../actions/types'\r\n\r\ninterface IAction {\r\n    type: string, \r\n    payload: any\r\n}\r\n\r\n\r\nconst initialState = {\r\n    items: [{_id: 228}],\r\n    loading: false\r\n}\r\n\r\n\r\nexport default function(state = initialState, action: IAction  ) {\r\n    switch(action.type) {\r\n        case GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false\r\n            }\r\n        case DELETE_ITEM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload)\r\n            }\r\n        case ADD_ITEM: \r\n            return {\r\n                ...state,\r\n                items: [action.payload, ...state.items]\r\n            }\r\n        case ITEMS_LOADING: \r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\n\r\n\r\n\r\nexport default combineReducers({\r\n    item: itemReducer\r\n})","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers/index';\r\n\r\n\r\ndeclare global {\r\n    interface Window {\r\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n  }\r\n\r\nconst initialState: object = {};\r\n\r\nconst middleWare = [thunk];\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, initialState,  composeEnhancers(applyMiddleware(...middleWare)))\r\n\r\n\r\nexport default store;","import React from \"react\";\n\nimport ShoppingList from \"./components/ShoppingList\";\nimport AppNavbar from \"./components/AppNavbar\";\nimport ItemModal from \"./components/ItemModal\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { Container } from \"reactstrap\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <AppNavbar />\n        <Container>\n          <ItemModal />\n          <ShoppingList />\n        </Container>\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}